tol = 1e-8;% EvaluationtStart = tic; erk_method_name = 'ERK-GL2';[te2, ez2, efc2] = exponentialRK(N, gamma, intgamma, erk_method_name, [t0 tf], z0, h_ERK, tol);tElapsed_ERK = toc(tStart);sefc2 = sum(efc2)% --------------------------------Explicit vs ERK--------------------------tStart = tic;prk_method_name = 'Ralston';[tp2, pz2, pfc2] = explicitRK(f, prk_method_name, [t0 tf], z0, h_explicit);plot(tp2, pz2(:,1), 'DisplayName', prk_method_name);tElapsed_explicit = toc(tStart);spfc2 = sum(pfc2)if (sum(efc2) > sum(pfc2))    fprintf('Explicit RK method used %f percent less function calls than ERK\n', 100*((sum(efc2)-sum(pfc2))/sum(efc2)));else    fprintf('ERK method used %f percent less function calls than explicit RK\n', 100*((sum(pfc2)-sum(efc2))/sum(pfc2)));end% % -------------------------Implicit vs ERK---------------------------------% tStart = tic;% irk_method_name = 'GL2';% [~, iz2, ifc2] = implicitRK(f, irk_method_name, [t0 tf], z0, h_imp, tol);% tElapsed_imp = toc(tStart);% % sifc2 = sum(ifc2)% if (sum(efc2) > sum(ifc2))%     fprintf('implicit RK method used %f percent less function calls than ERK\n', 100*((sum(efc2)-sum(ifc2))/sum(efc2)));% else%     fprintf('ERK method used %f percent less function calls than implicit RK\n', 100*((sum(ifc2)-sum(efc2))/sum(ifc2)));% end% % -----------------------------------------------------------------------% q to p, expect chaosps = [4,0.1; 16,0.1]; % Poincare section (plane) determined by this column vector of pointsfigure(1); clf;subplot(2,2,1); plot(ez2(:,1), ez2(:,2), 'DisplayName', [erk_method_name ', tol = ' num2str(tol)]);hold on; plot(ps(:,1), ps(:,2));title(['h = ' num2str(h_ERK) ', fevals = ' num2str(sefc2) ', runtime = ' num2str(tElapsed_ERK) 'sec']);legend;xlabel('q');ylabel('p');subplot(2,2,3); plot(pz2(:,1), pz2(:,2), 'DisplayName', [prk_method_name ', tol = ' num2str(tol)]);hold on; plot(ps(:,1), ps(:,2));title(['h = ' num2str(h_ERK) ', fevals = ' num2str(spfc2) ', runtime = ' num2str(tElapsed_explicit) 'sec']);legend;xlabel('q');ylabel('p');legend;% % see two, close initial conditions.% [~, ez22, ~] = exponentialRK(N, gamma, intgamma, erk_method_name, [t0 tf], z0 + tol * ones(size(z0)), h_ERK, tol);% [~, pz22, ~] = explicitRK(f, prk_method_name, [t0 tf], z0 + tol * ones(size(z0)), h_explicit);% figure(1); clf;% % subplot(2,2,1); % plot(ez2(:,1), ez2(:,2), 'DisplayName', [erk_method_name ', tol = ' num2str(tol)]); % title(['h = ' num2str(h_ERK) ', fevals = ' num2str(sefc2) ', runtime = ' num2str(tElapsed_ERK) 'sec']);% xlabel('q');% ylabel('p');% legend;% % subplot(2,2,2)% plot(abs(ez22(:,1) - ez2(:,1)), 'DisplayName', erk_method_name);% ylabel('abs err between close ICs');% xlabel('iterations');% % % subplot(2,2,3); % plot(pz2(:,1), pz2(:,2), 'DisplayName', [prk_method_name ', tol = ' num2str(tol)]); % title(['h = ' num2str(h_ERK) ', fevals = ' num2str(spfc2) ', runtime = ' num2str(tElapsed_explicit) 'sec']);% xlabel('q');% ylabel('p');% legend;% % subplot(2,2,4)% plot(abs(pz22(:,1) - pz2(:,1)), 'DisplayName', prk_method_name);% ylabel('abs err between close ICs');% xlabel('iterations');% corresponding Poincare mappez = poincareMap(ez2, ps);ppz = poincareMap(pz2, ps);subplot(2,2,2)scatter(pez(:,1), pez(:,2), 2, 'DisplayName', erk_method_name);title('Poincare section')legend;xlabel('q');ylabel('p');subplot(2,2,4)scatter(ppz(:,1), ppz(:,2),2, 'DisplayName', prk_method_name);legend;xlabel('q');ylabel('p');% we check when the flow passes through p=0, and% calculate how q has changed% x_{k+1} = P(x_k)% function [poincare_plot] = poincareMap(z, ~) % % find when flow intersects the q axis with p positive% for i = 2:size(z, 1)%     if (z(i,2) < 0)%         continue;%     end% endfunction [poincare_plot] = poincareMap(z, ps) % find when flow intesects some surface (not parallel to p,q plane)% Plot the points each time% Represent the plane by the line ps = [x0,y0; x1, y1];poincare_plot = [];for i = 2:size(z, 1)    if (z(i,2) > 0)        continue;    end        % we make a line segment between z_{i-1} and z_i. Check if     % intersects the plane given by ps. If so,    % add the intersection to our poincare section plot.    x1 = z(i-1,1);    x2 = z(i,1);    x3 = ps(1,1);    x4 = ps(2,1);    y1 = z(i-1,2);    y2 = z(i,2);    y3 = ps(1,2);    y4 = ps(2,2);    m1 = y2 - y1 / (x2 - x1);    m2 = y4 - y3 / (x4 - x3);    A = [-m1, 1; -m2, 1];    b = [y1 - m1 * x1; y3 - m2 * x3];    if (det(A) ~= 0)       p_pt = linsolve(A,b);       if (any(dist([p_pt, [x1,y1]']) > dist([x1,y1]', [x2,y2]')))           continue;        end        poincare_plot = [poincare_plot; p_pt'];        endendend